{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-11-10T22:48:13.683Z",
    "end": "2024-11-10T22:48:13.706Z",
    "duration": 23,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "301dbb52-833c-484a-b90c-a76ac2b81d0f",
      "title": "",
      "fullFile": "C:\\Users\\cmramos\\Documents\\carlos-mario\\workspace\\pos\\tests\\customers\\index.test.js",
      "file": "\\tests\\customers\\index.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83a0c674-295f-4e1b-89f6-666ddef5c43f",
          "title": "POST /customers",
          "fullFile": "C:\\Users\\cmramos\\Documents\\carlos-mario\\workspace\\pos\\tests\\customers\\index.test.js",
          "file": "\\tests\\customers\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should fail with status 400 for missing or invalid body",
              "fullTitle": "POST /customers Should fail with status 400 for missing or invalid body",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n\tawait request(app)\n\t\t.post('/customers')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Accept', 'application/json')\n\t\t.send(JSON.stringify({}))\n\t\t.expect('Content-Type', /application\\/json/)\n\t\t.expect(StatusCodes.BAD_REQUEST)\n\t\t// .expect(res => {\n\t\t// \tassert.exists(res.body)\n\t\t// \tassert.isObject(res.body)\n\t\t// \tassert.hasAllKeys(res.body, ['meta', 'status', 'title', 'code', 'message', 'data'])\n\t\t// \tassert.isObject(res.body.meta)\n\t\t// \tassert.hasAllKeys(res.body.meta, ['_timestamp', '_uuid', '_path'])\n\t\t// \tassert.strictEqual(res.body.status, 'failure')\n\t\t// \tassert.strictEqual(res.body.title, ReasonPhrases.BAD_REQUEST)\n\t\t// \tassert.strictEqual(res.body.code, StatusCodes.BAD_REQUEST)\n\t\t// \tassert.isNull(res.body.data)\n\t\t// })\n\t\t.post('/customers')\n\t\t.set('Content-Type', 'application/json')\n\t\t.set('Accept', 'application/json')\n\t\t.send(JSON.stringify({ name, identification }))\n\t\t.expect('Content-Type', /application\\/json/)\n\t\t.expect(StatusCodes.CREATED)\n\t\t// .expect(res => {\n\t\t// \tassert.exists(res.body)\n\t\t// \tassert.isObject(res.body)\n\t\t// \tassert.hasAllKeys(res.body, ['meta', 'status', 'title', 'code', 'message', 'data'])\n\t\t// \tassert.isObject(res.body.meta)\n\t\t// \tassert.hasAllKeys(res.body.meta, ['_timestamp', '_uuid', '_path'])\n\t\t// \tassert.strictEqual(res.body.status, 'failure')\n\t\t// \tassert.strictEqual(res.body.title, ReasonPhrases.BAD_REQUEST)\n\t\t// \tassert.strictEqual(res.body.code, StatusCodes.BAD_REQUEST)\n\t\t// \tassert.isNull(res.body.data)\n\t\t// })\n} catch (error) {\n\tthrow Error(error)\n}",
              "err": {
                "message": "Error: TypeError: request(...).post(...).set(...).set(...).send(...).expect(...).expect(...).post is not a function",
                "estack": "Error: TypeError: request(...).post(...).set(...).set(...).send(...).expect(...).expect(...).post is not a function\n    at Context.<anonymous> (file:///C:/Users/cmramos/Documents/carlos-mario/workspace/pos/tests/customers/index.test.js:51:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "51c87daf-86d6-4ca2-bdb3-b6d087f8c0e9",
              "parentUUID": "83a0c674-295f-4e1b-89f6-666ddef5c43f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "51c87daf-86d6-4ca2-bdb3-b6d087f8c0e9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}